import Bootdev.DSA.BST.BinarySearchTree as bt

# import turtle
if __name__ == "__main__":
    # current=bt.BinaryTree.get_root()
    root = bt.BinarySearchTree(10)
    current=root.root
    root.add_recursive(current, 5)
    root.add_recursive(current, 20)
    root.add_recursive(current, 6)
    root.add_recursive(current, 8)
    root.add_recursive(current, 15)
    root.add_recursive(current, 22)
    root.add_recursive(current, 7)
    root.add_recursive(current, 17)
    root.add_recursive(current, 30)

    root.post_order_print(current)
    print()
    # root.printBoundaryLeft(root.root)
    # print("\n")
    root.PrintSpiral()
    # print(root.get_diametar(root.root,0))
    print()
    root.search_tree(17,0)
    # print("inorder Traversal: ", end="")
    # root.in_order_print(root.root)
    # print()
    # print("inorder Traversal: ", end="")
    # root.print_inorder_iterative(root.root)
    # print()

    # print("Max Value: ", root.get_max(root.root))
    # print("Tree Height: ", root.get_height(root.root))
    # print("Total Nodes: ", root.count_all_nodes(root.root))
    # print("Leaf Nodes: ", root.count_leaf_nodes(root.root))
    # print("Search for 12: ", "Found" if root.search_tree(root.root, 12) else "Not Found")
    # print("Is Perfect Binary Tree: ", "Yes" if root.is_perfect(root.root) else "No")
    # print("Preorder Traversal: ", end="")
    # root.pre_order_print(root.root)
    # print()
    # print("Inorder Traversal: ", end="")
    # root.in_order_print(root.root)
    # print()
    # root.add_recursive(root.root, 5)
    # root.add_recursive(root.root, 15)
    # root.add_recursive(root.root, 3)
    # root.add_recursive(root.root, 7)
    # root.add_recursive(root.root, 12)
    # root.add_recursive(root.root, 18)
    # root = bt.BinaryTree(10)
    # screen = turtle.Screen()
    # screen.setup(width=800, height=600)
    # screen.tracer(0)
    # turtle.speed(0)
    # turtle.hideturtle()
    # bt.draw_tree(turtle, root.root, 0, 200, 300, 100)
    # screen.update()
    # turtle.done()
